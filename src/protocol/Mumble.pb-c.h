/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/Mumble.proto */

#ifndef PROTOBUF_C_proto_2fMumble_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fMumble_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MumbleProto__Version MumbleProto__Version;
typedef struct _MumbleProto__UDPTunnel MumbleProto__UDPTunnel;
typedef struct _MumbleProto__Authenticate MumbleProto__Authenticate;
typedef struct _MumbleProto__Ping MumbleProto__Ping;
typedef struct _MumbleProto__Reject MumbleProto__Reject;
typedef struct _MumbleProto__ServerSync MumbleProto__ServerSync;
typedef struct _MumbleProto__ChannelRemove MumbleProto__ChannelRemove;
typedef struct _MumbleProto__ChannelState MumbleProto__ChannelState;
typedef struct _MumbleProto__UserRemove MumbleProto__UserRemove;
typedef struct _MumbleProto__UserState MumbleProto__UserState;
typedef struct _MumbleProto__BanList MumbleProto__BanList;
typedef struct _MumbleProto__BanList__BanEntry MumbleProto__BanList__BanEntry;
typedef struct _MumbleProto__TextMessage MumbleProto__TextMessage;
typedef struct _MumbleProto__PermissionDenied MumbleProto__PermissionDenied;
typedef struct _MumbleProto__ACL MumbleProto__ACL;
typedef struct _MumbleProto__ACL__ChanGroup MumbleProto__ACL__ChanGroup;
typedef struct _MumbleProto__ACL__ChanACL MumbleProto__ACL__ChanACL;
typedef struct _MumbleProto__QueryUsers MumbleProto__QueryUsers;
typedef struct _MumbleProto__CryptSetup MumbleProto__CryptSetup;
typedef struct _MumbleProto__ContextActionModify MumbleProto__ContextActionModify;
typedef struct _MumbleProto__ContextAction MumbleProto__ContextAction;
typedef struct _MumbleProto__UserList MumbleProto__UserList;
typedef struct _MumbleProto__UserList__User MumbleProto__UserList__User;
typedef struct _MumbleProto__VoiceTarget MumbleProto__VoiceTarget;
typedef struct _MumbleProto__VoiceTarget__Target MumbleProto__VoiceTarget__Target;
typedef struct _MumbleProto__PermissionQuery MumbleProto__PermissionQuery;
typedef struct _MumbleProto__CodecVersion MumbleProto__CodecVersion;
typedef struct _MumbleProto__UserStats MumbleProto__UserStats;
typedef struct _MumbleProto__UserStats__Stats MumbleProto__UserStats__Stats;
typedef struct _MumbleProto__RequestBlob MumbleProto__RequestBlob;
typedef struct _MumbleProto__ServerConfig MumbleProto__ServerConfig;
typedef struct _MumbleProto__SuggestConfig MumbleProto__SuggestConfig;


/* --- enums --- */

typedef enum _MumbleProto__Reject__RejectType {
  /*
   * The rejection reason is unknown (details should be available
   * in Reject.reason).
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__None = 0,
  /*
   * The client attempted to connect with an incompatible version.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__WrongVersion = 1,
  /*
   * The user name supplied by the client was invalid.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__InvalidUsername = 2,
  /*
   * The client attempted to authenticate as a user with a password but it
   * was wrong.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__WrongUserPW = 3,
  /*
   * The client attempted to connect to a passworded server but the password
   * was wrong.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__WrongServerPW = 4,
  /*
   * Supplied username is already in use.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__UsernameInUse = 5,
  /*
   * Server is currently full and cannot accept more users.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__ServerFull = 6,
  /*
   * The user did not provide a certificate but one is required.
   */
  MUMBLE_PROTO__REJECT__REJECT_TYPE__NoCertificate = 7,
  MUMBLE_PROTO__REJECT__REJECT_TYPE__AuthenticatorFail = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MUMBLE_PROTO__REJECT__REJECT_TYPE)
} MumbleProto__Reject__RejectType;
typedef enum _MumbleProto__PermissionDenied__DenyType {
  /*
   * Operation denied for other reason, see reason field.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__Text = 0,
  /*
   * Permissions were denied.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__Permission = 1,
  /*
   * Cannot modify SuperUser.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__SuperUser = 2,
  /*
   * Invalid channel name.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__ChannelName = 3,
  /*
   * Text message too long.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__TextTooLong = 4,
  /*
   * The flux capacitor was spelled wrong.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__H9K = 5,
  /*
   * Operation not permitted in temporary channel.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__TemporaryChannel = 6,
  /*
   * Operation requires certificate.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__MissingCertificate = 7,
  /*
   * Invalid username.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__UserName = 8,
  /*
   * Channel is full.
   */
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__ChannelFull = 9,
  MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE__NestingLimit = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MUMBLE_PROTO__PERMISSION_DENIED__DENY_TYPE)
} MumbleProto__PermissionDenied__DenyType;
typedef enum _MumbleProto__ContextActionModify__Context {
  /*
   * Action is applicable to the server.
   */
  MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__CONTEXT__Server = 1,
  /*
   * Action can target a Channel.
   */
  MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__CONTEXT__Channel = 2,
  /*
   * Action can target a User.
   */
  MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__CONTEXT__User = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__CONTEXT)
} MumbleProto__ContextActionModify__Context;
typedef enum _MumbleProto__ContextActionModify__Operation {
  MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__OPERATION__Add = 0,
  MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__OPERATION__Remove = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__OPERATION)
} MumbleProto__ContextActionModify__Operation;

/* --- messages --- */

struct  _MumbleProto__Version
{
  ProtobufCMessage base;
  /*
   * 2-byte Major, 1-byte Minor and 1-byte Patch version number.
   */
  protobuf_c_boolean has_version;
  uint32_t version;
  /*
   * Client release name.
   */
  char *release;
  /*
   * Client OS name.
   */
  char *os;
  /*
   * Client OS version.
   */
  char *os_version;
};
#define MUMBLE_PROTO__VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__version__descriptor) \
    , 0,0, NULL, NULL, NULL }


/*
 * Not used. Not even for tunneling UDP through TCP.
 */
struct  _MumbleProto__UDPTunnel
{
  ProtobufCMessage base;
  /*
   * Not used.
   */
  ProtobufCBinaryData packet;
};
#define MUMBLE_PROTO__UDPTUNNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__udptunnel__descriptor) \
    , {0,NULL} }


/*
 * Used by the client to send the authentication credentials to the server.
 */
struct  _MumbleProto__Authenticate
{
  ProtobufCMessage base;
  /*
   * UTF-8 encoded username.
   */
  char *username;
  /*
   * Server or user password.
   */
  char *password;
  /*
   * Additional access tokens for server ACL groups.
   */
  size_t n_tokens;
  char **tokens;
  /*
   * A list of CELT bitstream version constants supported by the client.
   */
  size_t n_celt_versions;
  int32_t *celt_versions;
  protobuf_c_boolean has_opus;
  protobuf_c_boolean opus;
};
#define MUMBLE_PROTO__AUTHENTICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__authenticate__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL, 0,0 }


/*
 * Sent by the client to notify the server that the client is still alive.
 * Server must reply to the packet with the same timestamp and its own
 * good/late/lost/resync numbers. None of the fields is strictly required.
 */
struct  _MumbleProto__Ping
{
  ProtobufCMessage base;
  /*
   * Client timestamp. Server should not attempt to decode.
   */
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   * The amount of good packets received.
   */
  protobuf_c_boolean has_good;
  uint32_t good;
  /*
   * The amount of late packets received.
   */
  protobuf_c_boolean has_late;
  uint32_t late;
  /*
   * The amount of packets never received.
   */
  protobuf_c_boolean has_lost;
  uint32_t lost;
  /*
   * The amount of nonce resyncs.
   */
  protobuf_c_boolean has_resync;
  uint32_t resync;
  /*
   * The total amount of UDP packets received.
   */
  protobuf_c_boolean has_udp_packets;
  uint32_t udp_packets;
  /*
   * The total amount of TCP packets received.
   */
  protobuf_c_boolean has_tcp_packets;
  uint32_t tcp_packets;
  /*
   * UDP ping average.
   */
  protobuf_c_boolean has_udp_ping_avg;
  float udp_ping_avg;
  /*
   * UDP ping variance.
   */
  protobuf_c_boolean has_udp_ping_var;
  float udp_ping_var;
  /*
   * TCP ping average.
   */
  protobuf_c_boolean has_tcp_ping_avg;
  float tcp_ping_avg;
  /*
   * TCP ping variance.
   */
  protobuf_c_boolean has_tcp_ping_var;
  float tcp_ping_var;
};
#define MUMBLE_PROTO__PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__ping__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * Sent by the server when it rejects the user connection.
 */
struct  _MumbleProto__Reject
{
  ProtobufCMessage base;
  /*
   * Rejection type.
   */
  protobuf_c_boolean has_type;
  MumbleProto__Reject__RejectType type;
  /*
   * Human readable rejection reason.
   */
  char *reason;
};
#define MUMBLE_PROTO__REJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__reject__descriptor) \
    , 0,0, NULL }


/*
 * ServerSync message is sent by the server when it has authenticated the user
 * and finished synchronizing the server state.
 */
struct  _MumbleProto__ServerSync
{
  ProtobufCMessage base;
  /*
   * The session of the current user.
   */
  protobuf_c_boolean has_session;
  uint32_t session;
  /*
   * Maximum bandwidth that the user should use.
   */
  protobuf_c_boolean has_max_bandwidth;
  uint32_t max_bandwidth;
  /*
   * Server welcome text.
   */
  char *welcome_text;
  /*
   * Current user permissions in the root channel.
   */
  protobuf_c_boolean has_permissions;
  uint64_t permissions;
};
#define MUMBLE_PROTO__SERVER_SYNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__server_sync__descriptor) \
    , 0,0, 0,0, NULL, 0,0 }


/*
 * Sent by the client when it wants a channel removed. Sent by the server when
 * a channel has been removed and clients should be notified.
 */
struct  _MumbleProto__ChannelRemove
{
  ProtobufCMessage base;
  uint32_t channel_id;
};
#define MUMBLE_PROTO__CHANNEL_REMOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__channel_remove__descriptor) \
    , 0 }


/*
 * Used to communicate channel properties between the client and the server.
 * Sent by the server during the login process or when channel properties are
 * updated. Client may use this message to update said channel properties.
 */
struct  _MumbleProto__ChannelState
{
  ProtobufCMessage base;
  /*
   * Unique ID for the channel within the server.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * channel_id of the parent channel.
   */
  protobuf_c_boolean has_parent;
  uint32_t parent;
  /*
   * UTF-8 encoded channel name.
   */
  char *name;
  /*
   * A collection of channel id values of the linked channels. Absent during
   * the first channel listing.
   */
  size_t n_links;
  uint32_t *links;
  /*
   * UTF-8 encoded channel description. Only if the description is less than
   * 128 bytes
   */
  char *description;
  /*
   * A collection of channel_id values that should be added to links.
   */
  size_t n_links_add;
  uint32_t *links_add;
  /*
   * A collection of channel_id values that should be removed from links.
   */
  size_t n_links_remove;
  uint32_t *links_remove;
  /*
   * True if the channel is temporary.
   */
  protobuf_c_boolean has_temporary;
  protobuf_c_boolean temporary;
  /*
   * Position weight to tweak the channel position in the channel list.
   */
  protobuf_c_boolean has_position;
  int32_t position;
  /*
   * SHA1 hash of the description if the description is 128 bytes or more.
   */
  protobuf_c_boolean has_description_hash;
  ProtobufCBinaryData description_hash;
  /*
   * Maximum number of users allowed in the channel. If this value is zero,
   * the maximum number of users allowed in the channel is given by the
   * server's "usersperchannel" setting.
   */
  protobuf_c_boolean has_max_users;
  uint32_t max_users;
};
#define MUMBLE_PROTO__CHANNEL_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__channel_state__descriptor) \
    , 0,0, 0,0, NULL, 0,NULL, NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,{0,NULL}, 0,0 }


/*
 * Used to communicate user leaving or being kicked. May be sent by the client
 * when it attempts to kick a user. Sent by the server when it informs the
 * clients that a user is not present anymore.
 */
struct  _MumbleProto__UserRemove
{
  ProtobufCMessage base;
  /*
   * The user who is being kicked, identified by their session, not present
   * when no one is being kicked.
   */
  uint32_t session;
  /*
   * The user who initiated the removal. Either the user who performs the kick
   * or the user who is currently leaving.
   */
  protobuf_c_boolean has_actor;
  uint32_t actor;
  /*
   * Reason for the kick, stored as the ban reason if the user is banned.
   */
  char *reason;
  /*
   * True if the kick should result in a ban.
   */
  protobuf_c_boolean has_ban;
  protobuf_c_boolean ban;
};
#define MUMBLE_PROTO__USER_REMOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_remove__descriptor) \
    , 0, 0,0, NULL, 0,0 }


/*
 * Sent by the server when it communicates new and changed users to client.
 * First seen during login procedure. May be sent by the client when it wishes
 * to alter its state.
 */
struct  _MumbleProto__UserState
{
  ProtobufCMessage base;
  /*
   * Unique user session ID of the user whose state this is, may change on
   * reconnect.
   */
  protobuf_c_boolean has_session;
  uint32_t session;
  /*
   * The session of the user who is updating this user.
   */
  protobuf_c_boolean has_actor;
  uint32_t actor;
  /*
   * User name, UTF-8 encoded.
   */
  char *name;
  /*
   * Registered user ID if the user is registered.
   */
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  /*
   * Channel on which the user is.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * True if the user is muted by admin.
   */
  protobuf_c_boolean has_mute;
  protobuf_c_boolean mute;
  /*
   * True if the user is deafened by admin.
   */
  protobuf_c_boolean has_deaf;
  protobuf_c_boolean deaf;
  /*
   * True if the user has been suppressed from talking by a reason other than
   * being muted.
   */
  protobuf_c_boolean has_suppress;
  protobuf_c_boolean suppress;
  /*
   * True if the user has muted self.
   */
  protobuf_c_boolean has_self_mute;
  protobuf_c_boolean self_mute;
  /*
   * True if the user has deafened self.
   */
  protobuf_c_boolean has_self_deaf;
  protobuf_c_boolean self_deaf;
  /*
   * User image if it is less than 128 bytes.
   */
  protobuf_c_boolean has_texture;
  ProtobufCBinaryData texture;
  /*
   * The positional audio plugin identifier.
   * Positional audio information is only sent to users who share
   * identical plugin contexts.
   * This value is not trasmitted to clients.
   */
  protobuf_c_boolean has_plugin_context;
  ProtobufCBinaryData plugin_context;
  /*
   * The user's plugin-specific identity.
   * This value is not transmitted to clients.
   */
  char *plugin_identity;
  /*
   * User comment if it is less than 128 bytes.
   */
  char *comment;
  /*
   * The hash of the user certificate.
   */
  char *hash;
  /*
   * SHA1 hash of the user comment if it 128 bytes or more.
   */
  protobuf_c_boolean has_comment_hash;
  ProtobufCBinaryData comment_hash;
  /*
   * SHA1 hash of the user picture if it 128 bytes or more.
   */
  protobuf_c_boolean has_texture_hash;
  ProtobufCBinaryData texture_hash;
  /*
   * True if the user is a priority speaker.
   */
  protobuf_c_boolean has_priority_speaker;
  protobuf_c_boolean priority_speaker;
  /*
   * True if the user is currently recording.
   */
  protobuf_c_boolean has_recording;
  protobuf_c_boolean recording;
};
#define MUMBLE_PROTO__USER_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_state__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, NULL, NULL, NULL, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0 }


struct  _MumbleProto__BanList__BanEntry
{
  ProtobufCMessage base;
  /*
   * Banned IP address.
   */
  ProtobufCBinaryData address;
  /*
   * The length of the subnet mask for the ban.
   */
  uint32_t mask;
  /*
   * User name for identification purposes (does not affect the ban).
   */
  char *name;
  /*
   * The certificate hash of the banned user.
   */
  char *hash;
  /*
   * Reason for the ban (does not affect the ban).
   */
  char *reason;
  /*
   * Ban start time.
   */
  char *start;
  /*
   * Ban duration in seconds.
   */
  protobuf_c_boolean has_duration;
  uint32_t duration;
};
#define MUMBLE_PROTO__BAN_LIST__BAN_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__ban_list__ban_entry__descriptor) \
    , {0,NULL}, 0, NULL, NULL, NULL, NULL, 0,0 }


/*
 * Relays information on the bans. The client may send the BanList message to
 * either modify the list of bans or query them from the server. The server
 * sends this list only after a client queries for it.
 */
struct  _MumbleProto__BanList
{
  ProtobufCMessage base;
  /*
   * List of ban entries currently in place.
   */
  size_t n_bans;
  MumbleProto__BanList__BanEntry **bans;
  /*
   * True if the server should return the list, false if it should replace old
   * ban list with the one provided.
   */
  protobuf_c_boolean has_query;
  protobuf_c_boolean query;
};
#define MUMBLE_PROTO__BAN_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__ban_list__descriptor) \
    , 0,NULL, 0,0 }


/*
 * Used to send and broadcast text messages.
 */
struct  _MumbleProto__TextMessage
{
  ProtobufCMessage base;
  /*
   * The message sender, identified by its session.
   */
  protobuf_c_boolean has_actor;
  uint32_t actor;
  /*
   * Target users for the message, identified by their session.
   */
  size_t n_session;
  uint32_t *session;
  /*
   * The channels to which the message is sent, identified by their
   * channel_ids.
   */
  size_t n_channel_id;
  uint32_t *channel_id;
  /*
   * The root channels when sending message recursively to several channels,
   * identified by their channel_ids.
   */
  size_t n_tree_id;
  uint32_t *tree_id;
  /*
   * The UTF-8 encoded message. May be HTML if the server allows.
   */
  char *message;
};
#define MUMBLE_PROTO__TEXT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__text_message__descriptor) \
    , 0,0, 0,NULL, 0,NULL, 0,NULL, NULL }


struct  _MumbleProto__PermissionDenied
{
  ProtobufCMessage base;
  /*
   * The denied permission when type is Permission.
   */
  protobuf_c_boolean has_permission;
  uint32_t permission;
  /*
   * channel_id for the channel where the permission was denied when type is
   * Permission.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * The user who was denied permissions, identified by session.
   */
  protobuf_c_boolean has_session;
  uint32_t session;
  /*
   * Textual reason for the denial.
   */
  char *reason;
  /*
   * Type of the denial.
   */
  protobuf_c_boolean has_type;
  MumbleProto__PermissionDenied__DenyType type;
  /*
   * The name that is invalid when type is UserName.
   */
  char *name;
};
#define MUMBLE_PROTO__PERMISSION_DENIED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__permission_denied__descriptor) \
    , 0,0, 0,0, 0,0, NULL, 0,0, NULL }


struct  _MumbleProto__ACL__ChanGroup
{
  ProtobufCMessage base;
  /*
   * Name of the channel group, UTF-8 encoded.
   */
  char *name;
  /*
   * True if the group has been inherited from the parent (Read only).
   */
  protobuf_c_boolean has_inherited;
  protobuf_c_boolean inherited;
  /*
   * True if the group members are inherited.
   */
  protobuf_c_boolean has_inherit;
  protobuf_c_boolean inherit;
  /*
   * True if the group can be inherited by sub channels.
   */
  protobuf_c_boolean has_inheritable;
  protobuf_c_boolean inheritable;
  /*
   * Users explicitly included in this group, identified by user_id.
   */
  size_t n_add;
  uint32_t *add;
  /*
   * Users explicitly removed from this group in this channel if the group
   * has been inherited, identified by user_id.
   */
  size_t n_remove;
  uint32_t *remove;
  /*
   * Users inherited, identified by user_id.
   */
  size_t n_inherited_members;
  uint32_t *inherited_members;
};
#define MUMBLE_PROTO__ACL__CHAN_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__acl__chan_group__descriptor) \
    , NULL, 0,1, 0,1, 0,1, 0,NULL, 0,NULL, 0,NULL }


struct  _MumbleProto__ACL__ChanACL
{
  ProtobufCMessage base;
  /*
   * True if this ACL applies to the current channel.
   */
  protobuf_c_boolean has_apply_here;
  protobuf_c_boolean apply_here;
  /*
   * True if this ACL applies to the sub channels.
   */
  protobuf_c_boolean has_apply_subs;
  protobuf_c_boolean apply_subs;
  /*
   * True if the ACL has been inherited from the parent.
   */
  protobuf_c_boolean has_inherited;
  protobuf_c_boolean inherited;
  /*
   * ID of the user that is affected by this ACL.
   */
  protobuf_c_boolean has_user_id;
  uint32_t user_id;
  /*
   * ID of the group that is affected by this ACL.
   */
  char *group;
  /*
   * Bit flag field of the permissions granted by this ACL.
   */
  protobuf_c_boolean has_grant;
  uint32_t grant;
  /*
   * Bit flag field of the permissions denied by this ACL.
   */
  protobuf_c_boolean has_deny;
  uint32_t deny;
};
#define MUMBLE_PROTO__ACL__CHAN_ACL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__acl__chan_acl__descriptor) \
    , 0,1, 0,1, 0,1, 0,0, NULL, 0,0, 0,0 }


struct  _MumbleProto__ACL
{
  ProtobufCMessage base;
  /*
   * Channel ID of the channel this message affects.
   */
  uint32_t channel_id;
  /*
   * True if the channel inherits its parent's ACLs.
   */
  protobuf_c_boolean has_inherit_acls;
  protobuf_c_boolean inherit_acls;
  /*
   * User group specifications.
   */
  size_t n_groups;
  MumbleProto__ACL__ChanGroup **groups;
  /*
   * ACL specifications.
   */
  size_t n_acls;
  MumbleProto__ACL__ChanACL **acls;
  /*
   * True if the message is a query for ACLs instead of setting them.
   */
  protobuf_c_boolean has_query;
  protobuf_c_boolean query;
};
#define MUMBLE_PROTO__ACL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__acl__descriptor) \
    , 0, 0,1, 0,NULL, 0,NULL, 0,0 }


/*
 * Client may use this message to refresh its registered user information. The
 * client should fill the IDs or Names of the users it wants to refresh. The
 * server fills the missing parts and sends the message back.
 */
struct  _MumbleProto__QueryUsers
{
  ProtobufCMessage base;
  /*
   * user_ids.
   */
  size_t n_ids;
  uint32_t *ids;
  /*
   * User names in the same order as ids.
   */
  size_t n_names;
  char **names;
};
#define MUMBLE_PROTO__QUERY_USERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__query_users__descriptor) \
    , 0,NULL, 0,NULL }


/*
 * Used to initialize and resync the UDP encryption. Either side may request a
 * resync by sending the message without any values filled. The resync is
 * performed by sending the message with only the client or server nonce
 * filled.
 */
struct  _MumbleProto__CryptSetup
{
  ProtobufCMessage base;
  /*
   * Encryption key.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  /*
   * Client nonce.
   */
  protobuf_c_boolean has_client_nonce;
  ProtobufCBinaryData client_nonce;
  /*
   * Server nonce.
   */
  protobuf_c_boolean has_server_nonce;
  ProtobufCBinaryData server_nonce;
};
#define MUMBLE_PROTO__CRYPT_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__crypt_setup__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _MumbleProto__ContextActionModify
{
  ProtobufCMessage base;
  /*
   * The action name.
   */
  char *action;
  /*
   * The display name of the action.
   */
  char *text;
  /*
   * Context bit flags defining where the action should be displayed.
   */
  protobuf_c_boolean has_context;
  uint32_t context;
  protobuf_c_boolean has_operation;
  MumbleProto__ContextActionModify__Operation operation;
};
#define MUMBLE_PROTO__CONTEXT_ACTION_MODIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__context_action_modify__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


/*
 * Sent by the client when it wants to initiate a Context action.
 */
struct  _MumbleProto__ContextAction
{
  ProtobufCMessage base;
  /*
   * The target User for the action, identified by session.
   */
  protobuf_c_boolean has_session;
  uint32_t session;
  /*
   * The target Channel for the action, identified by channel_id.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * The action that should be executed.
   */
  char *action;
};
#define MUMBLE_PROTO__CONTEXT_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__context_action__descriptor) \
    , 0,0, 0,0, NULL }


struct  _MumbleProto__UserList__User
{
  ProtobufCMessage base;
  /*
   * Registered user ID.
   */
  uint32_t user_id;
  /*
   * Registered user name.
   */
  char *name;
  char *last_seen;
  protobuf_c_boolean has_last_channel;
  uint32_t last_channel;
};
#define MUMBLE_PROTO__USER_LIST__USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_list__user__descriptor) \
    , 0, NULL, NULL, 0,0 }


/*
 * Lists the registered users.
 */
struct  _MumbleProto__UserList
{
  ProtobufCMessage base;
  /*
   * A list of registered users.
   */
  size_t n_users;
  MumbleProto__UserList__User **users;
};
#define MUMBLE_PROTO__USER_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_list__descriptor) \
    , 0,NULL }


struct  _MumbleProto__VoiceTarget__Target
{
  ProtobufCMessage base;
  /*
   * Users that are included as targets.
   */
  size_t n_session;
  uint32_t *session;
  /*
   * Channel that is included as a target.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * ACL group that is included as a target.
   */
  char *group;
  /*
   * True if the voice should follow links from the specified channel.
   */
  protobuf_c_boolean has_links;
  protobuf_c_boolean links;
  /*
   * True if the voice should also be sent to children of the specific
   * channel.
   */
  protobuf_c_boolean has_children;
  protobuf_c_boolean children;
};
#define MUMBLE_PROTO__VOICE_TARGET__TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__voice_target__target__descriptor) \
    , 0,NULL, 0,0, NULL, 0,0, 0,0 }


/*
 * Sent by the client when it wants to register or clear whisper targets.
 * Note: The first available target ID is 1 as 0 is reserved for normal
 * talking. Maximum target ID is 30.
 */
struct  _MumbleProto__VoiceTarget
{
  ProtobufCMessage base;
  /*
   * Voice target ID.
   */
  protobuf_c_boolean has_id;
  uint32_t id;
  /*
   * The receivers that this voice target includes.
   */
  size_t n_targets;
  MumbleProto__VoiceTarget__Target **targets;
};
#define MUMBLE_PROTO__VOICE_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__voice_target__descriptor) \
    , 0,0, 0,NULL }


/*
 * Sent by the client when it wants permissions for a certain channel. Sent by
 * the server when it replies to the query or wants the user to resync all
 * channel permissions.
 */
struct  _MumbleProto__PermissionQuery
{
  ProtobufCMessage base;
  /*
   * channel_id of the channel for which the permissions are queried.
   */
  protobuf_c_boolean has_channel_id;
  uint32_t channel_id;
  /*
   * Channel permissions.
   */
  protobuf_c_boolean has_permissions;
  uint32_t permissions;
  /*
   * True if the client should drop its current permission information for all
   * channels.
   */
  protobuf_c_boolean has_flush;
  protobuf_c_boolean flush;
};
#define MUMBLE_PROTO__PERMISSION_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__permission_query__descriptor) \
    , 0,0, 0,0, 0,0 }


/*
 * Sent by the server to notify the users of the version of the CELT codec they
 * should use. This may change during the connection when new users join.
 */
struct  _MumbleProto__CodecVersion
{
  ProtobufCMessage base;
  /*
   * The version of the CELT Alpha codec.
   */
  int32_t alpha;
  /*
   * The version of the CELT Beta codec.
   */
  int32_t beta;
  /*
   * True if the user should prefer Alpha over Beta.
   */
  protobuf_c_boolean prefer_alpha;
  protobuf_c_boolean has_opus;
  protobuf_c_boolean opus;
};
#define MUMBLE_PROTO__CODEC_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__codec_version__descriptor) \
    , 0, 0, 1, 0,0 }


struct  _MumbleProto__UserStats__Stats
{
  ProtobufCMessage base;
  /*
   * The amount of good packets received.
   */
  protobuf_c_boolean has_good;
  uint32_t good;
  /*
   * The amount of late packets received.
   */
  protobuf_c_boolean has_late;
  uint32_t late;
  /*
   * The amount of packets never received.
   */
  protobuf_c_boolean has_lost;
  uint32_t lost;
  /*
   * The amount of nonce resyncs.
   */
  protobuf_c_boolean has_resync;
  uint32_t resync;
};
#define MUMBLE_PROTO__USER_STATS__STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_stats__stats__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * Used to communicate user stats between the server and clients.
 */
struct  _MumbleProto__UserStats
{
  ProtobufCMessage base;
  /*
   * User whose stats these are.
   */
  protobuf_c_boolean has_session;
  uint32_t session;
  /*
   * True if the message contains only mutable stats (packets, ping).
   */
  protobuf_c_boolean has_stats_only;
  protobuf_c_boolean stats_only;
  /*
   * Full user certificate chain of the user certificate in DER format.
   */
  size_t n_certificates;
  ProtobufCBinaryData *certificates;
  /*
   * Packet statistics for packets received from the client.
   */
  MumbleProto__UserStats__Stats *from_client;
  /*
   * Packet statistics for packets sent by the server.
   */
  MumbleProto__UserStats__Stats *from_server;
  /*
   * Amount of UDP packets sent.
   */
  protobuf_c_boolean has_udp_packets;
  uint32_t udp_packets;
  /*
   * Amount of TCP packets sent.
   */
  protobuf_c_boolean has_tcp_packets;
  uint32_t tcp_packets;
  /*
   * UDP ping average.
   */
  protobuf_c_boolean has_udp_ping_avg;
  float udp_ping_avg;
  /*
   * UDP ping variance.
   */
  protobuf_c_boolean has_udp_ping_var;
  float udp_ping_var;
  /*
   * TCP ping average.
   */
  protobuf_c_boolean has_tcp_ping_avg;
  float tcp_ping_avg;
  /*
   * TCP ping variance.
   */
  protobuf_c_boolean has_tcp_ping_var;
  float tcp_ping_var;
  /*
   * Client version.
   */
  MumbleProto__Version *version;
  /*
   * A list of CELT bitstream version constants supported by the client of this
   * user.
   */
  size_t n_celt_versions;
  int32_t *celt_versions;
  /*
   * Client IP address.
   */
  protobuf_c_boolean has_address;
  ProtobufCBinaryData address;
  /*
   * Bandwith used by this client.
   */
  protobuf_c_boolean has_bandwidth;
  uint32_t bandwidth;
  /*
   * Connection duration.
   */
  protobuf_c_boolean has_onlinesecs;
  uint32_t onlinesecs;
  /*
   * Duration since last activity.
   */
  protobuf_c_boolean has_idlesecs;
  uint32_t idlesecs;
  /*
   * True if the user has a strong certificate.
   */
  protobuf_c_boolean has_strong_certificate;
  protobuf_c_boolean strong_certificate;
  protobuf_c_boolean has_opus;
  protobuf_c_boolean opus;
};
#define MUMBLE_PROTO__USER_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__user_stats__descriptor) \
    , 0,0, 0,0, 0,NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,NULL, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * Used by the client to request binary data from the server. By default large
 * comments or textures are not sent within standard messages but instead the
 * hash is. If the client does not recognize the hash it may request the
 * resource when it needs it. The client does so by sending a RequestBlob
 * message with the correct fields filled with the user sessions or channel_ids
 * it wants to receive. The server replies to this by sending a new
 * UserState/ChannelState message with the resources filled even if they would
 * normally be transmitted as hashes.
 */
struct  _MumbleProto__RequestBlob
{
  ProtobufCMessage base;
  /*
   * sessions of the requested UserState textures.
   */
  size_t n_session_texture;
  uint32_t *session_texture;
  /*
   * sessions of the requested UserState comments.
   */
  size_t n_session_comment;
  uint32_t *session_comment;
  /*
   * channel_ids of the requested ChannelState descriptions.
   */
  size_t n_channel_description;
  uint32_t *channel_description;
};
#define MUMBLE_PROTO__REQUEST_BLOB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__request_blob__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


/*
 * Sent by the server when it informs the clients on server configuration
 * details.
 */
struct  _MumbleProto__ServerConfig
{
  ProtobufCMessage base;
  /*
   * The maximum bandwidth the clients should use.
   */
  protobuf_c_boolean has_max_bandwidth;
  uint32_t max_bandwidth;
  /*
   * Server welcome text.
   */
  char *welcome_text;
  /*
   * True if the server allows HTML.
   */
  protobuf_c_boolean has_allow_html;
  protobuf_c_boolean allow_html;
  /*
   * Maximum text message length.
   */
  protobuf_c_boolean has_message_length;
  uint32_t message_length;
  /*
   * Maximum image message length.
   */
  protobuf_c_boolean has_image_message_length;
  uint32_t image_message_length;
  /*
   * The maximum number of users allowed on the server.
   */
  protobuf_c_boolean has_max_users;
  uint32_t max_users;
};
#define MUMBLE_PROTO__SERVER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__server_config__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * Sent by the server to inform the clients of suggested client configuration
 * specified by the server administrator.
 */
struct  _MumbleProto__SuggestConfig
{
  ProtobufCMessage base;
  /*
   * Suggested client version.
   */
  protobuf_c_boolean has_version;
  uint32_t version;
  /*
   * True if the administrator suggests positional audio to be used on this
   * server.
   */
  protobuf_c_boolean has_positional;
  protobuf_c_boolean positional;
  /*
   * True if the administrator suggests push to talk to be used on this server.
   */
  protobuf_c_boolean has_push_to_talk;
  protobuf_c_boolean push_to_talk;
};
#define MUMBLE_PROTO__SUGGEST_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mumble_proto__suggest_config__descriptor) \
    , 0,0, 0,0, 0,0 }


/* MumbleProto__Version methods */
void   mumble_proto__version__init
                     (MumbleProto__Version         *message);
size_t mumble_proto__version__get_packed_size
                     (const MumbleProto__Version   *message);
size_t mumble_proto__version__pack
                     (const MumbleProto__Version   *message,
                      uint8_t             *out);
size_t mumble_proto__version__pack_to_buffer
                     (const MumbleProto__Version   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__Version *
       mumble_proto__version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__version__free_unpacked
                     (MumbleProto__Version *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__UDPTunnel methods */
void   mumble_proto__udptunnel__init
                     (MumbleProto__UDPTunnel         *message);
size_t mumble_proto__udptunnel__get_packed_size
                     (const MumbleProto__UDPTunnel   *message);
size_t mumble_proto__udptunnel__pack
                     (const MumbleProto__UDPTunnel   *message,
                      uint8_t             *out);
size_t mumble_proto__udptunnel__pack_to_buffer
                     (const MumbleProto__UDPTunnel   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__UDPTunnel *
       mumble_proto__udptunnel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__udptunnel__free_unpacked
                     (MumbleProto__UDPTunnel *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__Authenticate methods */
void   mumble_proto__authenticate__init
                     (MumbleProto__Authenticate         *message);
size_t mumble_proto__authenticate__get_packed_size
                     (const MumbleProto__Authenticate   *message);
size_t mumble_proto__authenticate__pack
                     (const MumbleProto__Authenticate   *message,
                      uint8_t             *out);
size_t mumble_proto__authenticate__pack_to_buffer
                     (const MumbleProto__Authenticate   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__Authenticate *
       mumble_proto__authenticate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__authenticate__free_unpacked
                     (MumbleProto__Authenticate *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__Ping methods */
void   mumble_proto__ping__init
                     (MumbleProto__Ping         *message);
size_t mumble_proto__ping__get_packed_size
                     (const MumbleProto__Ping   *message);
size_t mumble_proto__ping__pack
                     (const MumbleProto__Ping   *message,
                      uint8_t             *out);
size_t mumble_proto__ping__pack_to_buffer
                     (const MumbleProto__Ping   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__Ping *
       mumble_proto__ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__ping__free_unpacked
                     (MumbleProto__Ping *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__Reject methods */
void   mumble_proto__reject__init
                     (MumbleProto__Reject         *message);
size_t mumble_proto__reject__get_packed_size
                     (const MumbleProto__Reject   *message);
size_t mumble_proto__reject__pack
                     (const MumbleProto__Reject   *message,
                      uint8_t             *out);
size_t mumble_proto__reject__pack_to_buffer
                     (const MumbleProto__Reject   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__Reject *
       mumble_proto__reject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__reject__free_unpacked
                     (MumbleProto__Reject *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ServerSync methods */
void   mumble_proto__server_sync__init
                     (MumbleProto__ServerSync         *message);
size_t mumble_proto__server_sync__get_packed_size
                     (const MumbleProto__ServerSync   *message);
size_t mumble_proto__server_sync__pack
                     (const MumbleProto__ServerSync   *message,
                      uint8_t             *out);
size_t mumble_proto__server_sync__pack_to_buffer
                     (const MumbleProto__ServerSync   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ServerSync *
       mumble_proto__server_sync__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__server_sync__free_unpacked
                     (MumbleProto__ServerSync *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ChannelRemove methods */
void   mumble_proto__channel_remove__init
                     (MumbleProto__ChannelRemove         *message);
size_t mumble_proto__channel_remove__get_packed_size
                     (const MumbleProto__ChannelRemove   *message);
size_t mumble_proto__channel_remove__pack
                     (const MumbleProto__ChannelRemove   *message,
                      uint8_t             *out);
size_t mumble_proto__channel_remove__pack_to_buffer
                     (const MumbleProto__ChannelRemove   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ChannelRemove *
       mumble_proto__channel_remove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__channel_remove__free_unpacked
                     (MumbleProto__ChannelRemove *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ChannelState methods */
void   mumble_proto__channel_state__init
                     (MumbleProto__ChannelState         *message);
size_t mumble_proto__channel_state__get_packed_size
                     (const MumbleProto__ChannelState   *message);
size_t mumble_proto__channel_state__pack
                     (const MumbleProto__ChannelState   *message,
                      uint8_t             *out);
size_t mumble_proto__channel_state__pack_to_buffer
                     (const MumbleProto__ChannelState   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ChannelState *
       mumble_proto__channel_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__channel_state__free_unpacked
                     (MumbleProto__ChannelState *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__UserRemove methods */
void   mumble_proto__user_remove__init
                     (MumbleProto__UserRemove         *message);
size_t mumble_proto__user_remove__get_packed_size
                     (const MumbleProto__UserRemove   *message);
size_t mumble_proto__user_remove__pack
                     (const MumbleProto__UserRemove   *message,
                      uint8_t             *out);
size_t mumble_proto__user_remove__pack_to_buffer
                     (const MumbleProto__UserRemove   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__UserRemove *
       mumble_proto__user_remove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__user_remove__free_unpacked
                     (MumbleProto__UserRemove *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__UserState methods */
void   mumble_proto__user_state__init
                     (MumbleProto__UserState         *message);
size_t mumble_proto__user_state__get_packed_size
                     (const MumbleProto__UserState   *message);
size_t mumble_proto__user_state__pack
                     (const MumbleProto__UserState   *message,
                      uint8_t             *out);
size_t mumble_proto__user_state__pack_to_buffer
                     (const MumbleProto__UserState   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__UserState *
       mumble_proto__user_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__user_state__free_unpacked
                     (MumbleProto__UserState *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__BanList__BanEntry methods */
void   mumble_proto__ban_list__ban_entry__init
                     (MumbleProto__BanList__BanEntry         *message);
/* MumbleProto__BanList methods */
void   mumble_proto__ban_list__init
                     (MumbleProto__BanList         *message);
size_t mumble_proto__ban_list__get_packed_size
                     (const MumbleProto__BanList   *message);
size_t mumble_proto__ban_list__pack
                     (const MumbleProto__BanList   *message,
                      uint8_t             *out);
size_t mumble_proto__ban_list__pack_to_buffer
                     (const MumbleProto__BanList   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__BanList *
       mumble_proto__ban_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__ban_list__free_unpacked
                     (MumbleProto__BanList *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__TextMessage methods */
void   mumble_proto__text_message__init
                     (MumbleProto__TextMessage         *message);
size_t mumble_proto__text_message__get_packed_size
                     (const MumbleProto__TextMessage   *message);
size_t mumble_proto__text_message__pack
                     (const MumbleProto__TextMessage   *message,
                      uint8_t             *out);
size_t mumble_proto__text_message__pack_to_buffer
                     (const MumbleProto__TextMessage   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__TextMessage *
       mumble_proto__text_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__text_message__free_unpacked
                     (MumbleProto__TextMessage *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__PermissionDenied methods */
void   mumble_proto__permission_denied__init
                     (MumbleProto__PermissionDenied         *message);
size_t mumble_proto__permission_denied__get_packed_size
                     (const MumbleProto__PermissionDenied   *message);
size_t mumble_proto__permission_denied__pack
                     (const MumbleProto__PermissionDenied   *message,
                      uint8_t             *out);
size_t mumble_proto__permission_denied__pack_to_buffer
                     (const MumbleProto__PermissionDenied   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__PermissionDenied *
       mumble_proto__permission_denied__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__permission_denied__free_unpacked
                     (MumbleProto__PermissionDenied *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ACL__ChanGroup methods */
void   mumble_proto__acl__chan_group__init
                     (MumbleProto__ACL__ChanGroup         *message);
/* MumbleProto__ACL__ChanACL methods */
void   mumble_proto__acl__chan_acl__init
                     (MumbleProto__ACL__ChanACL         *message);
/* MumbleProto__ACL methods */
void   mumble_proto__acl__init
                     (MumbleProto__ACL         *message);
size_t mumble_proto__acl__get_packed_size
                     (const MumbleProto__ACL   *message);
size_t mumble_proto__acl__pack
                     (const MumbleProto__ACL   *message,
                      uint8_t             *out);
size_t mumble_proto__acl__pack_to_buffer
                     (const MumbleProto__ACL   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ACL *
       mumble_proto__acl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__acl__free_unpacked
                     (MumbleProto__ACL *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__QueryUsers methods */
void   mumble_proto__query_users__init
                     (MumbleProto__QueryUsers         *message);
size_t mumble_proto__query_users__get_packed_size
                     (const MumbleProto__QueryUsers   *message);
size_t mumble_proto__query_users__pack
                     (const MumbleProto__QueryUsers   *message,
                      uint8_t             *out);
size_t mumble_proto__query_users__pack_to_buffer
                     (const MumbleProto__QueryUsers   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__QueryUsers *
       mumble_proto__query_users__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__query_users__free_unpacked
                     (MumbleProto__QueryUsers *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__CryptSetup methods */
void   mumble_proto__crypt_setup__init
                     (MumbleProto__CryptSetup         *message);
size_t mumble_proto__crypt_setup__get_packed_size
                     (const MumbleProto__CryptSetup   *message);
size_t mumble_proto__crypt_setup__pack
                     (const MumbleProto__CryptSetup   *message,
                      uint8_t             *out);
size_t mumble_proto__crypt_setup__pack_to_buffer
                     (const MumbleProto__CryptSetup   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__CryptSetup *
       mumble_proto__crypt_setup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__crypt_setup__free_unpacked
                     (MumbleProto__CryptSetup *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ContextActionModify methods */
void   mumble_proto__context_action_modify__init
                     (MumbleProto__ContextActionModify         *message);
size_t mumble_proto__context_action_modify__get_packed_size
                     (const MumbleProto__ContextActionModify   *message);
size_t mumble_proto__context_action_modify__pack
                     (const MumbleProto__ContextActionModify   *message,
                      uint8_t             *out);
size_t mumble_proto__context_action_modify__pack_to_buffer
                     (const MumbleProto__ContextActionModify   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ContextActionModify *
       mumble_proto__context_action_modify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__context_action_modify__free_unpacked
                     (MumbleProto__ContextActionModify *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ContextAction methods */
void   mumble_proto__context_action__init
                     (MumbleProto__ContextAction         *message);
size_t mumble_proto__context_action__get_packed_size
                     (const MumbleProto__ContextAction   *message);
size_t mumble_proto__context_action__pack
                     (const MumbleProto__ContextAction   *message,
                      uint8_t             *out);
size_t mumble_proto__context_action__pack_to_buffer
                     (const MumbleProto__ContextAction   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ContextAction *
       mumble_proto__context_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__context_action__free_unpacked
                     (MumbleProto__ContextAction *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__UserList__User methods */
void   mumble_proto__user_list__user__init
                     (MumbleProto__UserList__User         *message);
/* MumbleProto__UserList methods */
void   mumble_proto__user_list__init
                     (MumbleProto__UserList         *message);
size_t mumble_proto__user_list__get_packed_size
                     (const MumbleProto__UserList   *message);
size_t mumble_proto__user_list__pack
                     (const MumbleProto__UserList   *message,
                      uint8_t             *out);
size_t mumble_proto__user_list__pack_to_buffer
                     (const MumbleProto__UserList   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__UserList *
       mumble_proto__user_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__user_list__free_unpacked
                     (MumbleProto__UserList *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__VoiceTarget__Target methods */
void   mumble_proto__voice_target__target__init
                     (MumbleProto__VoiceTarget__Target         *message);
/* MumbleProto__VoiceTarget methods */
void   mumble_proto__voice_target__init
                     (MumbleProto__VoiceTarget         *message);
size_t mumble_proto__voice_target__get_packed_size
                     (const MumbleProto__VoiceTarget   *message);
size_t mumble_proto__voice_target__pack
                     (const MumbleProto__VoiceTarget   *message,
                      uint8_t             *out);
size_t mumble_proto__voice_target__pack_to_buffer
                     (const MumbleProto__VoiceTarget   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__VoiceTarget *
       mumble_proto__voice_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__voice_target__free_unpacked
                     (MumbleProto__VoiceTarget *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__PermissionQuery methods */
void   mumble_proto__permission_query__init
                     (MumbleProto__PermissionQuery         *message);
size_t mumble_proto__permission_query__get_packed_size
                     (const MumbleProto__PermissionQuery   *message);
size_t mumble_proto__permission_query__pack
                     (const MumbleProto__PermissionQuery   *message,
                      uint8_t             *out);
size_t mumble_proto__permission_query__pack_to_buffer
                     (const MumbleProto__PermissionQuery   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__PermissionQuery *
       mumble_proto__permission_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__permission_query__free_unpacked
                     (MumbleProto__PermissionQuery *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__CodecVersion methods */
void   mumble_proto__codec_version__init
                     (MumbleProto__CodecVersion         *message);
size_t mumble_proto__codec_version__get_packed_size
                     (const MumbleProto__CodecVersion   *message);
size_t mumble_proto__codec_version__pack
                     (const MumbleProto__CodecVersion   *message,
                      uint8_t             *out);
size_t mumble_proto__codec_version__pack_to_buffer
                     (const MumbleProto__CodecVersion   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__CodecVersion *
       mumble_proto__codec_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__codec_version__free_unpacked
                     (MumbleProto__CodecVersion *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__UserStats__Stats methods */
void   mumble_proto__user_stats__stats__init
                     (MumbleProto__UserStats__Stats         *message);
/* MumbleProto__UserStats methods */
void   mumble_proto__user_stats__init
                     (MumbleProto__UserStats         *message);
size_t mumble_proto__user_stats__get_packed_size
                     (const MumbleProto__UserStats   *message);
size_t mumble_proto__user_stats__pack
                     (const MumbleProto__UserStats   *message,
                      uint8_t             *out);
size_t mumble_proto__user_stats__pack_to_buffer
                     (const MumbleProto__UserStats   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__UserStats *
       mumble_proto__user_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__user_stats__free_unpacked
                     (MumbleProto__UserStats *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__RequestBlob methods */
void   mumble_proto__request_blob__init
                     (MumbleProto__RequestBlob         *message);
size_t mumble_proto__request_blob__get_packed_size
                     (const MumbleProto__RequestBlob   *message);
size_t mumble_proto__request_blob__pack
                     (const MumbleProto__RequestBlob   *message,
                      uint8_t             *out);
size_t mumble_proto__request_blob__pack_to_buffer
                     (const MumbleProto__RequestBlob   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__RequestBlob *
       mumble_proto__request_blob__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__request_blob__free_unpacked
                     (MumbleProto__RequestBlob *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__ServerConfig methods */
void   mumble_proto__server_config__init
                     (MumbleProto__ServerConfig         *message);
size_t mumble_proto__server_config__get_packed_size
                     (const MumbleProto__ServerConfig   *message);
size_t mumble_proto__server_config__pack
                     (const MumbleProto__ServerConfig   *message,
                      uint8_t             *out);
size_t mumble_proto__server_config__pack_to_buffer
                     (const MumbleProto__ServerConfig   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__ServerConfig *
       mumble_proto__server_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__server_config__free_unpacked
                     (MumbleProto__ServerConfig *message,
                      ProtobufCAllocator *allocator);
/* MumbleProto__SuggestConfig methods */
void   mumble_proto__suggest_config__init
                     (MumbleProto__SuggestConfig         *message);
size_t mumble_proto__suggest_config__get_packed_size
                     (const MumbleProto__SuggestConfig   *message);
size_t mumble_proto__suggest_config__pack
                     (const MumbleProto__SuggestConfig   *message,
                      uint8_t             *out);
size_t mumble_proto__suggest_config__pack_to_buffer
                     (const MumbleProto__SuggestConfig   *message,
                      ProtobufCBuffer     *buffer);
MumbleProto__SuggestConfig *
       mumble_proto__suggest_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mumble_proto__suggest_config__free_unpacked
                     (MumbleProto__SuggestConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MumbleProto__Version_Closure)
                 (const MumbleProto__Version *message,
                  void *closure_data);
typedef void (*MumbleProto__UDPTunnel_Closure)
                 (const MumbleProto__UDPTunnel *message,
                  void *closure_data);
typedef void (*MumbleProto__Authenticate_Closure)
                 (const MumbleProto__Authenticate *message,
                  void *closure_data);
typedef void (*MumbleProto__Ping_Closure)
                 (const MumbleProto__Ping *message,
                  void *closure_data);
typedef void (*MumbleProto__Reject_Closure)
                 (const MumbleProto__Reject *message,
                  void *closure_data);
typedef void (*MumbleProto__ServerSync_Closure)
                 (const MumbleProto__ServerSync *message,
                  void *closure_data);
typedef void (*MumbleProto__ChannelRemove_Closure)
                 (const MumbleProto__ChannelRemove *message,
                  void *closure_data);
typedef void (*MumbleProto__ChannelState_Closure)
                 (const MumbleProto__ChannelState *message,
                  void *closure_data);
typedef void (*MumbleProto__UserRemove_Closure)
                 (const MumbleProto__UserRemove *message,
                  void *closure_data);
typedef void (*MumbleProto__UserState_Closure)
                 (const MumbleProto__UserState *message,
                  void *closure_data);
typedef void (*MumbleProto__BanList__BanEntry_Closure)
                 (const MumbleProto__BanList__BanEntry *message,
                  void *closure_data);
typedef void (*MumbleProto__BanList_Closure)
                 (const MumbleProto__BanList *message,
                  void *closure_data);
typedef void (*MumbleProto__TextMessage_Closure)
                 (const MumbleProto__TextMessage *message,
                  void *closure_data);
typedef void (*MumbleProto__PermissionDenied_Closure)
                 (const MumbleProto__PermissionDenied *message,
                  void *closure_data);
typedef void (*MumbleProto__ACL__ChanGroup_Closure)
                 (const MumbleProto__ACL__ChanGroup *message,
                  void *closure_data);
typedef void (*MumbleProto__ACL__ChanACL_Closure)
                 (const MumbleProto__ACL__ChanACL *message,
                  void *closure_data);
typedef void (*MumbleProto__ACL_Closure)
                 (const MumbleProto__ACL *message,
                  void *closure_data);
typedef void (*MumbleProto__QueryUsers_Closure)
                 (const MumbleProto__QueryUsers *message,
                  void *closure_data);
typedef void (*MumbleProto__CryptSetup_Closure)
                 (const MumbleProto__CryptSetup *message,
                  void *closure_data);
typedef void (*MumbleProto__ContextActionModify_Closure)
                 (const MumbleProto__ContextActionModify *message,
                  void *closure_data);
typedef void (*MumbleProto__ContextAction_Closure)
                 (const MumbleProto__ContextAction *message,
                  void *closure_data);
typedef void (*MumbleProto__UserList__User_Closure)
                 (const MumbleProto__UserList__User *message,
                  void *closure_data);
typedef void (*MumbleProto__UserList_Closure)
                 (const MumbleProto__UserList *message,
                  void *closure_data);
typedef void (*MumbleProto__VoiceTarget__Target_Closure)
                 (const MumbleProto__VoiceTarget__Target *message,
                  void *closure_data);
typedef void (*MumbleProto__VoiceTarget_Closure)
                 (const MumbleProto__VoiceTarget *message,
                  void *closure_data);
typedef void (*MumbleProto__PermissionQuery_Closure)
                 (const MumbleProto__PermissionQuery *message,
                  void *closure_data);
typedef void (*MumbleProto__CodecVersion_Closure)
                 (const MumbleProto__CodecVersion *message,
                  void *closure_data);
typedef void (*MumbleProto__UserStats__Stats_Closure)
                 (const MumbleProto__UserStats__Stats *message,
                  void *closure_data);
typedef void (*MumbleProto__UserStats_Closure)
                 (const MumbleProto__UserStats *message,
                  void *closure_data);
typedef void (*MumbleProto__RequestBlob_Closure)
                 (const MumbleProto__RequestBlob *message,
                  void *closure_data);
typedef void (*MumbleProto__ServerConfig_Closure)
                 (const MumbleProto__ServerConfig *message,
                  void *closure_data);
typedef void (*MumbleProto__SuggestConfig_Closure)
                 (const MumbleProto__SuggestConfig *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mumble_proto__version__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__udptunnel__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__authenticate__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__ping__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__reject__descriptor;
extern const ProtobufCEnumDescriptor    mumble_proto__reject__reject_type__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__server_sync__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__channel_remove__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__channel_state__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_remove__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_state__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__ban_list__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__ban_list__ban_entry__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__text_message__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__permission_denied__descriptor;
extern const ProtobufCEnumDescriptor    mumble_proto__permission_denied__deny_type__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__acl__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__acl__chan_group__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__acl__chan_acl__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__query_users__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__crypt_setup__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__context_action_modify__descriptor;
extern const ProtobufCEnumDescriptor    mumble_proto__context_action_modify__context__descriptor;
extern const ProtobufCEnumDescriptor    mumble_proto__context_action_modify__operation__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__context_action__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_list__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_list__user__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__voice_target__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__voice_target__target__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__permission_query__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__codec_version__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_stats__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__user_stats__stats__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__request_blob__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__server_config__descriptor;
extern const ProtobufCMessageDescriptor mumble_proto__suggest_config__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fMumble_2eproto__INCLUDED */
